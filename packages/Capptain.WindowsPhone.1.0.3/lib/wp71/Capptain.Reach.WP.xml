<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Capptain.Reach.WP</name>
    </assembly>
    <members>
        <member name="T:Capptain.Reach.CapptainAnnouncementPage">
            <summary>
            CapptainAnnouncementPage
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPage`2">
            <summary>
            CapptainReachPage
            </summary>
            <typeparam name="GenericViewModel">ViewModel</typeparam>
            <typeparam name="GenericPayload">Payload</typeparam>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPage`2.mCapptainAction">
            <summary>
            Application bar's action button
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.InitializeViewModel">
            <summary>
            Initialize the ViewModel
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.InitializeView">
            <summary>
            Initialize view element
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.InitializeApplicationBar">
            <summary>
            The application bar is probably the worst component ever imagined.
            Because we can't use binding, we have to do everything here, by hand.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.CreateViewModel(Capptain.Reach.CapptainReachContent)">
            <summary>
            The new constraint of the generic cannot have parameters. This is why we delegate
            the creation to the subclass that will know the real type of the generic.
            Simply override this method, create the view model with the content, and then return
            the result.
            </summary>
            <param name="content">The content from which you must create the viewmodel</param>
            <returns>The real view model</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.GoBack">
            <summary>
            Go back in the navigation stack, if possible.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.SetActionLabel(System.String)">
            <summary>
            Set the action field in the application with the action label.
            If the action label is not valid, set the field with the default value.
            </summary>
            <param name="actionLabel">The new value of the field</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.SetExitLabel(System.String)">
            <summary>
            Set the action field in the application with the action label.
            If the action label is not valid, set the field with the default value.
            </summary>
            <param name="exitLabel">The new value of the field</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.GetApplicationBarButton(System.Int32)">
            <summary>
            Unlike other components in the silverlight framework, the Name has no effect for
            an application bar button. If we try to use directly the button, a NullReferenceException
            will be thrown.
            That is why we find in the application bar the button we need for a given index.
            </summary>
            <param name="position">The index of the button</param>
            <returns>The button we must use</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.OnBackKeyPress(System.ComponentModel.CancelEventArgs)">
            <summary>
            On back key press, cancel the push.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.OnActionButtonClicked(System.Object,System.EventArgs)">
            <summary>
            On action click, action the push and if an url is set, create
            a webbrowser task.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.OnExitButtonClicked(System.Object,System.EventArgs)">
            <summary>
            On exit click, exit the push and go back.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPage`2.NotifyPropertyChanged(System.String)">
            <summary>
            Notify changes on given property
            </summary>
            <param name="propertyName">Property's name</param>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPage`2.ViewModel">
            <summary>
            ViewModel
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPage`2.CapptainAction">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPage`2.CapptainExit">
            <summary>
            Exit
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReachPage`2.PropertyChanged">
            <summary>
            PropertyChanged event
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainAnnouncementPage.CreateViewModel(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create an announcement view model for a given content
            </summary>
            <param name="content">Content</param>
            <returns>CapptainAnnouncementViewModel</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainAnnouncementPage.OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Check if an id is set in the query string of the page. If so, capture it
            and create the content and view model from here.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainAnnouncementPage.OnActionButtonClicked(System.Object,System.EventArgs)">
            <summary>
            On action click, action the push and if an url is set, create
            a webbrowser task.
            
            Be careful to not use the GoBack() method if the ViewModel has an url
            when/if overriding this method.
            
            Do something like :
            
             if (ViewModel.HasUrl)
               mInstanceField = true;
             else
               GoBack();
                 
            And in the OnNavigatedTo method, if the flag is set, use GoBack().
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:Capptain.Reach.CapptainAnnouncementViewModel">
            <summary>
            CapptainAnnouncementViewModel
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPageViewModel`1">
            <summary>
            CapptainReachPageViewModel
            </summary>
            <typeparam name="Payload"></typeparam>
        </member>
        <member name="T:Capptain.Reach.CapptainReachViewModel">
            <summary>
            A basic class to handle the common event on a notification/announcement/poll.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachViewModel.Display">
            <summary>
            Indicate that the reach content has been displayed.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachViewModel.Action">
            <summary>
            Indicate that the reach content has been actioned.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachViewModel.Exit">
            <summary>
            Indicate that the reach content has been exited.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachViewModel.RaiseDisplayed(Capptain.Reach.CapptainReachFeedbackEventArgs)">
            <summary>
            Raise displayed event
            </summary>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachViewModel.RaiseActioned(Capptain.Reach.CapptainReachFeedbackEventArgs)">
            <summary>
            Raise actioned event
            </summary>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachViewModel.RaiseExited(Capptain.Reach.CapptainReachFeedbackEventArgs)">
            <summary>
            Raise exited event
            </summary>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPageViewModel`1.#ctor">
            <summary>
            Create an empty CapptainReachPageViewModel
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPageViewModel`1.#ctor(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create a CapptainReachPageViewModel
            </summary>
            <param name="content">CapptainReachContent to base the VM on</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPageViewModel`1.InitializeProperties(`0)">
            <summary>
            Initialize the properties of the VM
            </summary>
            <param name="payload"></param>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.Subtitle">
            <summary>
            Subtitle
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.ActionLabel">
            <summary>
            Action label
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.ExitLabel">
            <summary>
            Exit label
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.HasTitle">
            <summary>
            Has a title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.HasSubtitle">
            <summary>
            Has a subtitle
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.HasBody">
            <summary>
            Has a body
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.HasButtons">
            <summary>
            Has buttons
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.HasAction">
            <summary>
            Has action
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPageViewModel`1.HasExit">
            <summary>
            Has exit
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainAnnouncementViewModel.#ctor">
            <summary>
            Create an empty CapptainAnnouncementViewModel
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainAnnouncementViewModel.#ctor(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create a CapptainAnnouncementViewModel with a given content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:Capptain.Reach.CapptainAnnouncementViewModel.InitializeProperties(Capptain.Reach.CapptainReachAnnouncement)">
            <summary>
            Initialize the properties
            </summary>
            <param name="payload"></param>
        </member>
        <member name="P:Capptain.Reach.CapptainAnnouncementViewModel.Url">
            <summary>
            Action url
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainAnnouncementViewModel.HasUrl">
            <summary>
            Has an URL
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainDefaultTextViewAnnouncementPage">
            <summary>
            Capptain default page for the TextView announcements
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainTextViewAnnouncementPage">
            <summary>
            Basic behavior for a Text View Announcement
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultTextViewAnnouncementPage.#ctor">
            <summary>
            Create a CapptainDefaultTextViewAnnouncementPage
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultTextViewAnnouncementPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainDefaultWebViewAnnouncementPage">
            <summary>
            Capptain default page for the WebView announcements
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainWebViewAnnouncementPage">
            <summary>
            Basic 
            for a Web view announcement
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainWebViewAnnouncementPage.SCRIPT">
            <summary>
            A script object which contains the capptainReachContent object to interface
            the web view and the inner html, abstracting the window.external.notify method.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainWebViewAnnouncementPage.InitializeViewModel">
            <summary>
            Initialize the ViewModel
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainWebViewAnnouncementPage.OnScriptNotified(System.Object,Microsoft.Phone.Controls.NotifyEventArgs)">
            <summary>
            Handle the result of a call to window.external.notify method in the 
            web browser.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultWebViewAnnouncementPage.#ctor">
            <summary>
            Create a CapptainDefaultWebViewAnnouncementPage
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultWebViewAnnouncementPage.OnScriptNotified(System.Object,Microsoft.Phone.Controls.NotifyEventArgs)">
            <summary>
            Handler when a script is called.
            Needed by the XAML
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultWebViewAnnouncementPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainUI">
            <summary>
            Some useful methods used by Capptain.Reach
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.IsLightTheme">
            <summary>
            Indicate if the current theme is the light theme.
            </summary>
            <returns>True if the current theme is the light theme, false otherwise (dark theme).</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.GetIconCloseUri(System.Boolean)">
            <summary>
            Get the uri of the close button, depending on the theme.
            </summary>
            <param name="inverse">Indicate if the icon must be inversed for the current theme.</param>
            <returns>The url of the icon.</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.CreateNotification(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create a notification for the current page.
            This method is invoked on the UI thread if we are on a background one.
            Otherwise, it's called directly.
            
            If an exception is catched during the creation, we throw it and let the
            caller handles it.
            </summary>
            <returns>The notification view</returns>
            <exception cref="T:System.Exception">If an error occurred during the execution</exception>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.CreateAndDisplayNotification(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create, add and display a notification.
            This method MUST be called on the UI thread.
            </summary>
            <param name="reachContent">Content</param>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.TryFindOrCreateCapptainGridRoot(Microsoft.Phone.Controls.PhoneApplicationPage,System.Windows.Controls.Grid@)">
            <summary>
            Find an eligible capptain root grid. If it does not exist, create a new one.
            </summary>
            <param name="page">The current phone application page</param>
            <param name="container">
            The existing grid of the same name or a new one.
            Will <b>ALWAYS</b> be set. Either by the existing grid, or a new one.
            </param>
            <returns>True if the grid already exist, false otherwise.</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.ResetCapptainRootGrid">
            <summary>
            Suppress the current notification from the capptain grid.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.WaitForUI(System.Action{System.Windows.Navigation.NavigationService,System.Windows.Navigation.NavigationContext})">
            <summary>
            Poll the UI until a page is created.
            Then, invoke a callback with the navigation service and context
            </summary>
            <param name="callback">The result callback</param>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.IsValidUriForWebBrowserTask(System.String)">
            <summary>
            Indicate if a given url is valid for a webbrowser task.
            The url must not be null/whitespace and should be prefixed
            by the http or https protocol.
            </summary>
            <param name="uri">The uri to test</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainUI.StartWebBrowserTask(System.String)">
            <summary>
            Start a web browser task for a given uri, if the uri is valid.
            </summary>
            <param name="uri">The uri to open</param>
        </member>
        <member name="T:Capptain.Reach.CapptainBase64ImageConverter">
            <summary>
            Convert a Base64 image into a real usable image
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainBase64ImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the Base64 string to an image
            </summary>
            <param name="value">Value</param>
            <param name="targetType">TargetType</param>
            <param name="parameter">Parameter</param>
            <param name="culture">Culture</param>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.CapptainBase64ImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back an image to a Base64 (not implemented).
            </summary>
            <param name="value">Value</param>
            <param name="targetType">TargetType</param>
            <param name="parameter">Parameter</param>
            <param name="culture">Culture</param>
            <returns></returns>
        </member>
        <member name="T:Capptain.Reach.CapptainVisibilityConverter">
            <summary>
            Visiblity converter
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean to a Visibility value
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.CapptainVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a Visibility value to a boolean
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Capptain.Reach.CapptainPollPage">
            <summary>
            CapptainPollPage
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPollPage.#ctor">
            <summary>
            Create a CapptainPollPage
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPollPage.InitializeApplicationBar">
            <summary>
            Disable Action Button by default before displaying the view
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPollPage.CreateViewModel(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create the view model with a given content
            </summary>
            <param name="content">Content</param>
            <returns>CapptainPollViewModel</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainPollPage.EnableActionButton">
            <summary>
            Enable action button in app bar
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainPollViewModel">
            <summary>
            CapptainPollViewModel
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPollViewModel.mQuestions">
            <summary>
            List of questions
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainPollViewModel.mIsActionButtonEnabled">
            <summary>
            Notify the view to enable Action Button when it is set
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPollViewModel.#ctor">
            <summary>
            Create an empty CapptainPollViewModel
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPollViewModel.#ctor(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create a CapptainPollViewModel
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPollViewModel.InitializeProperties(Capptain.Reach.CapptainReachPoll)">
            <summary>
            Initialize the properties
            </summary>
            <param name="payload">Payload</param>
        </member>
        <member name="M:Capptain.Reach.CapptainPollViewModel.GetResults">
            <summary>
            Get the answers for each question.
            The string is json-formatted.
            
            Example :
            
            {
              1: 2,
              2: 6,
              questionId: answerId,
              [...]
            }
            </summary>
            <returns>A json string</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainPollViewModel.Action">
            <summary>
            When actioning the view, send the results as the body.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPollViewModel.IsEveryQuestionChecked">
            <summary>
            Check that each question has been checked
            </summary>
            <returns>Whether all questions have been answered or not</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainPollViewModel.CanEnableActionButton">
            <summary>
            Request Action button to be enabled if every questions have been checked 
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainPollViewModel.Questions">
            <summary>
            Questions
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainPollViewModel.IsActionButtonEnabled">
            <summary>
            Notify the view to enable Action Button when it is set
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainDefaultPollPage">
            <summary>
            Capptain default page for the polls
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultPollPage.#ctor">
            <summary>
            Create a CapptainDefaultPollPage
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultPollPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainBasicNotificationView">
            <summary>
            Sample notification for the CapptainReach SDK.
            Base your implementation on this class.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainNotificationView">
            <summary>
            Notification view base class and main logic
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationView.InitializeViewModel(Capptain.Reach.CapptainNotificationViewModel)">
            <summary>
            Initialize the view model
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationView.Action(System.Object,System.EventArgs)">
            <summary>
            Action the notification.
            Remove it from its parent, and send the feedback.
            If the notification has an url, open a browser.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationView.Exit(System.Object,System.EventArgs)">
            <summary>
            Exit the notification.
            Remove it from its parent, and send the feedback.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationView.Remove">
            <summary>
            Remove the component from its parent.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationView.SetStretch(System.Windows.Controls.Grid,System.Windows.Controls.Image)">
            <summary>
            Change the stretch property of an <Image /> element based on the value of the
            container <Grid /> element.
            </summary>
            <param name="container">Main parent</param>
            <param name="image">Image element</param>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationView.OnActioned(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            On action handler for a gesture event.
            Set the event as handled, and call the Action() method.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationView.OnExited(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            On exit handler for a gesture event.
            Set the event as handled, and call the Exit() method.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationView.ViewModel">
            <summary>
            The ViewModel of the notification.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainBasicNotificationView.#ctor(Capptain.Reach.CapptainNotificationViewModel)">
            <summary>
            Create a CapptainBasicNotificationView
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainBasicNotificationView.OnActioned(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            OnAction handler
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainBasicNotificationView.OnExited(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            OnExit handler
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainBasicNotificationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainDefaultNotificationView">
            <summary>
            CapptainDefaultNotificationView
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainDefaultNotificationView.SwivelInStoryboard">
            <summary>
            Swivel animation when displaying the notification
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainDefaultNotificationView.SwivelOutStoryboard">
            <summary>
            Swivel animation when closing the notification
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.#ctor(Capptain.Reach.CapptainNotificationViewModel)">
            <summary>
            Create a CapptainDefaultNotificationView
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.MoveTo(System.Windows.Media.TranslateTransform,System.Double,System.Double,System.EventHandler)">
            <summary>
            Animate a move on a transform object to a new position, with a power ease easing function.
            </summary>
            <param name="transform">The transform object to move</param>
            <param name="from">The prior position</param>
            <param name="to">The new position</param>
            <param name="handlerOnCompleted">On complete event handler</param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.GetThreshold">
            <summary>
            Get the threshold value for the container, where it is considered "out".
            </summary>
            <returns>The size of the first part</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.OnActioned(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Complete override of the default OnActioned handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.OnExited(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Complete override of the default OnExited handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.OnMove(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Respond to a ManipulationDelta event.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.OnMoveEnded(System.Object,System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Respond to a ManipulationCompleted event.
            </summary>
            <param name="send">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.OnImageOnlySizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            If the of the image changes, change the stretch property.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainDefaultNotificationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainNotificationViewModel">
            <summary>
            CapptainNotificationViewModel
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationViewModel.#ctor">
            <summary>
            Create an empty CapptainNotificationViewModel
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainNotificationViewModel.#ctor(Capptain.Reach.CapptainReachContent)">
            <summary>
            Create a CappptainNotificationViewModel with a given content
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.ImageMargin">
            <summary>
            ImageMargin (depends on the icon)
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasText">
            <summary>
            Has text
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasNoText">
            <summary>
            Has no text
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasTitle">
            <summary>
            Has title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasMessage">
            <summary>
            Has a message
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasImage">
            <summary>
            Has an image
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasIcon">
            <summary>
            Has an icon
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasClose">
            <summary>
            Has a close button
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.HasUrl">
            <summary>
            Has an action url
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainNotificationViewModel.CloseButtonUri">
            <summary>
            Uri for the close button image
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainBrowserHelper">
            <summary>
            CapptainBrowserHelper for the WebBrowser component
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainBrowserHelper.HtmlProperty">
            <summary>
            Html property for the xaml component.
            Add the binding for the html content.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainBrowserHelper.GetHtml(Microsoft.Phone.Controls.WebBrowser)">
            <summary>
            Getter
            </summary>
            <param name="browser"></param>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.CapptainBrowserHelper.SetHtml(Microsoft.Phone.Controls.WebBrowser,System.String)">
            <summary>
            Setter
            </summary>
            <param name="browser"></param>
            <param name="value"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainBrowserHelper.OnHtmlChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Registered callback
            </summary>
            <param name="dependencyObject">Object with the dependecy property</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:Capptain.Reach.CapptainPageHeader">
            <summary>
            CapptainPageHeader
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPageHeader.#ctor">
            <summary>
            Create a CapptainPageHeader
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainPageHeader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Capptain.Reach.Channel">
            <summary>
            The Channel object is the link between MPNS and the SDK.
            It establishes the channel, set the uri and the toast.
            </summary>
        </member>
        <member name="M:Capptain.Reach.Channel.#ctor(Capptain.Reach.CapptainReach,System.String,System.Boolean)">
            <summary>
            Create a wrapper around the HttpNotificationChannel.
            </summary>
            <param name="reach">The CapptainReach object.</param>
            <param name="channelName">The name of the HttpNotificationChannel.</param>
            <param name="bindNow">Indicate if the channel must be activated asap.</param>
        </member>
        <member name="M:Capptain.Reach.Channel.Bind">
            <summary>
            Initialize the HttpNotificationChannel.
            Find the channel, create it if needed and attach handlers.
            </summary>
        </member>
        <member name="M:Capptain.Reach.Channel.Unbind">
            <summary>
            Unbind the channel
            </summary>
        </member>
        <member name="M:Capptain.Reach.Channel.AttachHandlers">
            <summary>
            Attach handlers for the http notification channel.
            * Channel Uri updated
            * Error occurred
            * Shell toast received
            </summary>
        </member>
        <member name="M:Capptain.Reach.Channel.DetachHandlers">
            <summary>
            Detach handlers for the http notification channel.
            </summary>
        </member>
        <member name="T:Capptain.Reach.PushService">
            <summary>
            The push service handles the transaction between the capptain backend and the SDK.
            It's a low level object that doesn't do any processing.
            </summary>
        </member>
        <member name="E:Capptain.Reach.PushService.MessagesApiResponded">
            <summary>
            Event that is invoked when the Messages API has responded to a request.
            Provides an event args containing the response code and the result (if any).
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReach">
            <summary>
            Capptain Reach handler.
            Initialize the SDK and manage the push queue.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReach.sInstance">
            <summary>
            Module instance
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReach.sPendingCommands">
            <summary>
            Calls made before the module was created
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.Init(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initialize reach to handle push notification.
            Your app must add this capability to react to push :
            * <Capability Name="ID_CAP_PUSH_NOTIFICATION" />
            </summary>
            <param name="appId">
            Application id
            </param>
            <param name="sdkKey">
            SDK key
            </param>
            <param name="enableNativePush">
            Indicate if the push notifications channel for MPNS must be registered directly.
            If you set it to false, don't forget to set it later to take advantage of MPNS in your application.
            </param>
            <param name="channelName">
            The name of the push channel. Provide the same that your application may currently use.
            </param>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.StartCommand(System.Action)">
            <summary>
            Start a command.
            If the module is not created, put the defer the command.
            </summary>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.EnableNativePush">
            <summary>
            Enable the native push (MPNS) for Capptain.Reach. This will allow the reach module to receive push notifications from MPNS.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.DisableNativePush">
            <summary>
            Disable the native push (MPNS) for Capptain.Reach. This will disallow the reach module to receive push notifications from MPNS.
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReach.Handler">
            <summary>
            Handler to indicate which UI resources the Reach module should use.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.StartRetrievingLaunchMessage">
            <summary>
            Indicate that the SDK is trying to retrieve the launch message.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.CompleteRetrievingLaunchMessage">
            <summary>
            Indicate that the SDK has received the launch message.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.FailRetrievingLaunchMessage">
            <summary>
            Indicate that the SDK has failed to retrieve the launch message.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.ProcessRawMessages(System.String)">
            <summary>
            Process incoming raw messages into Capptain messages.
            </summary>
            <param name="messages">The raw data containing the messages</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReach.ProcessDataPush(Capptain.Reach.CapptainReachContent)">
            <summary>
            Process a datapush
            </summary>
            <param name="content">The datapush</param>
        </member>
        <member name="E:Capptain.Reach.CapptainReach.DataPushStringReceived">
            <summary>
            Event when receiving a string datapush.
            
            The callback must of the form :
            <b>bool</b> OnDataPushStringReceived(<b>string body</b>) {}
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReach.DataPushBase64Received">
            <summary>
            Event when receiving a base64 datapush.
            
            The callback must be of the form :
            <b>bool</b> OnDataPushBase64Received(<b>byte[] decodedBody</b>, <b>string encodedBody</b>) {}
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReach.PushMessageReceived">
            <summary>
            Event when receiving a push message.
            
            The callback must be of the form :
            void OnPushMessageReceived(<b>int id</b>, <b>bool replyTo</b>, <b>string payload</b>) {}
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReach.RetrieveLaunchMessageStarted">
            <summary>
            Invoked when Capptain is about to retrieve the push message that launched the application (from MPNS).
            It is a good opportunity to start displaying a message to the end user indicating that data is being loaded.
            
            This code will be executed on the UI Thread. You don't have to call Dispatcher.BeginInvoke().
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReach.RetrieveLaunchMessageCompleted">
            <summary>
            Invoked when Capptain received the push message that launched the application.
            Use this opportunity to hide any loading message and display appropriate content to the end user.
            
            This code will be executed on the UI Thread. You don't have to call Dispatcher.BeginInvoke().
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReach.RetrieveLaunchMessageFailed">
            <summary>
            Invoked when Capptain failed to retrieve the push message that launched the application.
            Use this opportunity to hide any loading message and to display a dialog to the end user 
            indicating that the message could not be fetched.
            
            This code will be executed on the UI Thread. You don't have to call Dispatcher.BeginInvoke().
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachHandler">
            <summary>
            UI handler for Capptain Reach.
            Override any method you need to customize a component.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachHandler.GetTextViewAnnouncementUri">
            <summary>
            Uri for the text view announcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachHandler.GetWebViewAnnouncementUri">
            <summary>
            Uri for the web view announcement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachHandler.GetPollUri">
            <summary>
            Uri for the poll
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachHandler.CreateNotification(Capptain.Reach.CapptainNotificationViewModel)">
            <summary>
            Notification view component that will handle the notification
            </summary>
            <param name="viewModel">The capptain view model containing data</param>
            <returns>The notification view</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachHandler.GetNotificationPosition(Capptain.Reach.CapptainNotificationViewModel)">
            <summary>
            The position of a notification
            </summary>
            <param name="viewModel">The capptain view model containing data</param>
            <returns>The position (as a NotificationPosition object), either TOP or BOTTOM</returns>
        </member>
        <member name="T:Capptain.Reach.CapptainReachHandler.NotificationPosition">
            <summary>
            Available positions for the notification
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachHandler.NotificationPosition.TOP">
            <summary>
            Top of the screen
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachHandler.NotificationPosition.BOTTOM">
            <summary>
            Bottom of the screen
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachWorker.ProcessContent">
            <summary>
            Process a content (start it and set the onFinished event)
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachWorker.CanProcessNext">
            <summary>
            Indicate if the next content can be processed.
            </summary>
            <returns>True if available, false otherwise.</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachWorker.ShowCurrent(Capptain.Reach.CapptainReachContent)">
            <summary>
            Show a content. Catch an eventual exception and drop if it's the case.
            </summary>
            <param name="content">Content to show</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachWorker.OnMessagesReceived(System.Object,Capptain.Reach.MessagesApiEventArgs)">
            <summary>
            Handler when receiving new messages from the backend.
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Messages args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachWorker.OnNavigated(System.Object,System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Manage a navigation change.
            If the page is not a capptain content (ie. announcement, poll and all),
            reset the grid and present the content again.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Args</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachWorker.OnFinished(System.Object,System.EventArgs)">
            <summary>
            Clean-up the current content and process again.
            Until there is nothing left.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Capptain.Reach.ContentManager.mListLock">
            <summary>
            A global list locker on the content manager for the critical sections.
            </summary>
        </member>
        <member name="M:Capptain.Reach.ContentManager.Add(System.Collections.Generic.List{Capptain.Reach.CapptainMessage})">
            <summary>
            Add a list of new messages to the content manager.
            </summary>
            <param name="messages">The new messages</param>
        </member>
        <member name="M:Capptain.Reach.ContentManager.Remove(Capptain.Reach.CapptainMessage)">
            <summary>
            Remove a message from the content manager.
            </summary>
            <param name="message">The message to delete</param>
        </member>
        <member name="M:Capptain.Reach.ContentManager.Scan">
            <summary>
            Look for an eligible message (the message with highest priority) and return it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Capptain.Reach.CapptainReachContent">
            <summary>
            CapptainReachContent
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachContent.DeviceIdRegex">
            <summary>
            Device id regex (cached)
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ConvertDeviceIdTag(System.String)">
            <summary>
            {deviceid} tag => real device id converter
            </summary>
            <param name="data">String to examine</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.#ctor(Capptain.Reach.CapptainMessage,System.EventHandler)">
            <summary>
            Create a content
            </summary>
            <param name="message">The message used to create the content</param>
            <param name="onFinished">
            The handler to trigger when the content is finished. 
            We recommend to set it now to raise it if the object throw an exception during initialization.
            </param>
            <exception cref="T:Capptain.Reach.CapptainInvalidPayloadException">The paylod may be invalid when created.</exception>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.Show">
            <summary>
            Present the content as a notification if the content is interactive.
            Otherwise, throw a NotSupportedException (for a datapush for example).
            </summary>
            <exception cref="T:System.NotSupportedException">If the data is not interactive</exception>
            <exception cref="T:Capptain.Reach.CapptainInvalidNotificationCreationException">
            If the notification cannot be created.
            </exception>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ParseDeviceId(Capptain.Reach.CapptainReachPayload)">
            <summary>
            Parse the (eventual) url or body of the content and change
            the {deviceid} tag to the real device id.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.Finish">
            <summary>
            Indicate that the content is terminated abd should be processed
            by the objects that listen to the event.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.SendFeedback(System.String,System.String)">
            <summary>
            Helper to send a feedback to the capptain backend
            </summary>
            <param name="status">Type of the feedback</param>
            <param name="body">An eventual body to send with the feedback</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.Navigate(System.String)">
            <summary>
            Navigate to the given URI
            </summary>
            <param name="uri">Uri of the page</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.TryNavigateToBrowser(System.String)">
            <summary>
            Navigate to the given URI in a web browser task if the url is valid
            </summary>
            <param name="uri">Uri of the page</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.TrashIfExpiry">
            <summary>
            Test if the content is expirable, and trash it if needed
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.DisplayInAppNotification">
            <summary>
            Signal to display the notification
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ActionInAppNotification">
            <summary>
            Signal to action the notification
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ExitInAppNotification">
            <summary>
            Signal to exit the current notification
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.DisplayContent">
            <summary>
            Signal to display the content
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ActionContent(System.String)">
            <summary>
            Signal to action the content
            </summary>
            <param name="body">Data</param>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.ExitContent">
            <summary>
            Signal to exit the content
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachContent.Drop">
            <summary>
            Signal to drop the content
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReachContent.Finished">
            <summary>
            When the content has been reported (content-actioned, dropped, etc.),
            call the event to let the manager handle the end of the message.
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachContent.Message">
            <summary>
            The message of the current content
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachContent.Data">
            <summary>
            Content announcement
            </summary>
        </member>
    </members>
</doc>
