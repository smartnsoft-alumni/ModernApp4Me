<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Capptain.Reach.Portable</name>
    </assembly>
    <members>
        <member name="T:Capptain.Reach.CapptainMessage">
            <summary>
            CapptainMessage (contains a payload and some metadata)
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainMessage.IsPayloadType(System.String)">
            <summary>
            Indicate if the payload is of a given type.
            </summary>
            <param name="expected">The expected type of the payload.</param>
            <returns>True if it corresponds, false otherwise.</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainMessage.GetPayloadAsObject">
            <summary>
            Get the payload of the message as a CapptainReachAnnouncement.
            </summary>
            <exception cref="T:Capptain.Reach.CapptainInvalidPayloadException"></exception>
            <returns>A CapptainReachAnnouncement object</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainMessage.ToString">
            <summary>
            Print the message
            </summary>
            <returns>A json-formatted string</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.Id">
            <summary>
            Message id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.Payload">
            <summary>
            Message payload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainMessage.ReplyTo">
            <summary>
            Message replyto id
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachAnnouncement">
            <summary>
            CapptainReachAnnouncement
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPagePayload">
            <summary>
            All page content should inherit from this class (announcement, poll)
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachInteractivePayload">
            <summary>
            All reach content (except datapush) should inherit from this class.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload">
            <summary>
            CapptainReachPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.#ctor">
            <summary>
            Create a CapptainReachPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.GetReachType">
            <summary>
            Indicate the type of the reach payload.
            </summary>
            <returns>The string representation of the reach type.</returns>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.HasExpiry">
            <summary>
            Indicate if the payload has an expiration date.
            </summary>
            <returns>True if there is an expiry, false otherwise</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.Id">
            <summary>
            Payload id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.Category">
            <summary>
            Payload category
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.Expiry">
            <summary>
            Payload expiration date
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.ActionPayload">
            <summary>
            ActionPayload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.ActionPayload.DEFAULT_LABEL">
            <summary>
            Default value
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.ActionPayload.#ctor">
            <summary>
            Create an ActionPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ActionPayload.Label">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ActionPayload.Url">
            <summary>
            Action URL
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.AnswerPayload">
            <summary>
            Answer payload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.AnswerPayload.mIsChecked">
            <summary>
            Check status
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.AnswerPayload.#ctor">
            <summary>
            Create an AnswerPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.AnswerPayload.NotifyPropertyChanged(System.String)">
            <summary>
            Notify changes on given property
            </summary>
            <param name="propertyName">Property's name</param>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.Id">
            <summary>
            Answer id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.IsChecked">
            <summary>
            Check status
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.Value">
            <summary>
            Answer value
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.AnswerPayload.GroupName">
            <summary>
            Answer group name
            </summary>
        </member>
        <member name="E:Capptain.Reach.CapptainReachPayload.AnswerPayload.PropertyChanged">
            <summary>
            PropertyChanged event
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.BehaviorPayload">
            <summary>
            BehaviorPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.BehaviorPayload.#ctor">
            <summary>
            Create a BehaviorPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.BehaviorPayload.Session">
            <summary>
            Session
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.BehaviorPayload.Activities">
            <summary>
            Activities
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.DataTypePayload">
            <summary>
            Format of a payload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.DataTypePayload.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.DataTypePayload.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.DataTypePayload.Base64">
            <summary>
            Base64
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.ExitPayload">
            <summary>
            ExitPayload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.ExitPayload.DEFAULT_LABEL">
            <summary>
            Default value for the exit payload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.ExitPayload.#ctor">
            <summary>
            Create an ExitPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ExitPayload.Label">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.ExpiryPayload">
            <summary>
            ExpiryPayload
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachPayload.ExpiryPayload.NO_EXPIRY">
            <summary>
            No expiry constant
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.ExpiryPayload.#ctor">
            <summary>
            Create an expiry payload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ExpiryPayload.IsLocalTimeZone">
            <summary>
            Indicate if it is in a local time zone
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.ExpiryPayload.Date">
            <summary>
            Expiry date
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.NotificationPayload">
            <summary>
            NotificationPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.NotificationPayload.#ctor">
            <summary>
            Create a notification payload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.IsCloseable">
            <summary>
            Indicate if it is closeable 
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.HasIcon">
            <summary>
            Indicate if it has an icon
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.HasTickerIcon">
            <summary>
            Indicate if it has a ticker icon
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.Title">
            <summary>
            Notification title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.Message">
            <summary>
            Notification message
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.NotificationPayload.Image">
            <summary>
            Notification image
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPayload.QuestionPayload">
            <summary>
            QuestionPayload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPayload.QuestionPayload.#ctor">
            <summary>
            Create a QuestionPayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.QuestionPayload.Id">
            <summary>
            Question id
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.QuestionPayload.Title">
            <summary>
            Question title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPayload.QuestionPayload.Answers">
            <summary>
            Answers
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachInteractivePayload.#ctor">
            <summary>
            Create a CapptainReachInteractivePayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Notification">
            <summary>
            Notification
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Exit">
            <summary>
            Exit
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachInteractivePayload.Behavior">
            <summary>
            Behavior
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPagePayload.#ctor">
            <summary>
            Create a CapptainReachPagePayload
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPagePayload.Title">
            <summary>
            Page title
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPagePayload.Body">
            <summary>
            Page body
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachAnnouncement.#ctor">
            <summary>
            Create a CapptainReachAnnouncement
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachAnnouncement.GetReachType">
            <summary>
            Get the reach type
            </summary>
            <returns>CapptainReachKind</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachAnnouncement.Type">
            <summary>
            Announcement type
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainTickle">
            <summary>
            The CapptainTickle is a class that wraps a tickle push from the Capptain back-end.
            It's only purpose is to find whether or not the app can refresh its message list
            when receiving a raw push from the microsoft push.
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainTickle.#ctor">
            <summary>
            Create a CapptainTickle
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainTickle.AppId">
            <summary>
            Application id
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachDatapush">
            <summary>
            CapptainReachDataPush
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachDatapush.#ctor">
            <summary>
            Create a CapptainReachDataPush
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachDatapush.GetReachType">
            <summary>
            Get the reach type
            </summary>
            <returns>CapptainReachKind</returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachDatapush.Type">
            <summary>
            Datapush type
            </summary>
        </member>
        <member name="P:Capptain.Reach.CapptainReachDatapush.Body">
            <summary>
            Datapush body
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachNotificationAnnouncement">
            <summary>
            CapptainReachNotificationAnnouncement
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachNotificationAnnouncement.#ctor">
            <summary>
            Create an empty CapptainReachNotificationAnnouncement
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachNotificationAnnouncement.GetReachType">
            <summary>
            Get the reach type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Capptain.Reach.CapptainReachPoll">
            <summary>
            CapptainReachPoll payload
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPoll.#ctor">
            <summary>
            Create a CapptainReachPoll
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachPoll.GetReachType">
            <summary>
            Return the payload type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Capptain.Reach.CapptainReachPoll.Questions">
            <summary>
            Questions
            </summary>
        </member>
        <member name="T:Capptain.Reach.ICapptainReachPage">
            <summary>
            The implementation (CapptainReachPage) needs a generic. We cannot use the equality
            check with the implementation when testing if a page can show a push.
            This is why we have this interface (for the moment).
            </summary>
        </member>
        <member name="T:Capptain.Reach.IChannel">
            <summary>
            The Channel object is the link between MPNS and the SDK.
            It establishes the channel, set the uri and the toast.
            </summary>
        </member>
        <member name="M:Capptain.Reach.IChannel.Bind">
            <summary>
            Initialize the HttpNotificationChannel.
            Find the channel, create it if needed and attach handlers.
            </summary>
        </member>
        <member name="M:Capptain.Reach.IChannel.Unbind">
            <summary>
            Unbind the channel
            </summary>
        </member>
        <member name="T:Capptain.Reach.IPushService">
            <summary>
            Interface for PushService
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachFeedback">
            <summary>
            CapptainReachFeedback
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.DROPPED">
            <summary>
            Dropped
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.IN_APP_NOTIFICATION_DISPLAYED">
            <summary>
            In app notification displayed
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.IN_APP_NOTIFICATION_ACTIONED">
            <summary>
            In app notification actioned
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.IN_APP_NOTIFICATION_EXITED">
            <summary>
            In app notification exited
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.CONTENT_DISPLAYED">
            <summary>
            Content displayed
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.CONTENT_ACTIONED">
            <summary>
            Content actioned
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachFeedback.CONTENT_EXITED">
            <summary>
            Content exited
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachKind">
             <summary>
             Ugly, but hey, c# doesn't support string enum as Java does.
             Yep, probably one of the only things that Java does better than c#. :)
            
             It could be nice to create an enum with a System.ComponentModel.DescriptionAttribute
             and using reflection to get the value. One day.
             But for the moment, it's good enough.
            
             See : 
             - http://blog.spontaneouspublicity.com/associating-strings-with-enums-in-c
             - http://stackoverflow.com/questions/424366/c-sharp-string-enums
             </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.NOTIFICATION_ANNOUNCEMENT">
            <summary>
            Notification announcement type
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.ANNOUNCEMENT">
            <summary>
            Announcement type
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.POLL">
            <summary>
            Poll type
            </summary>
        </member>
        <member name="F:Capptain.Reach.CapptainReachKind.DATAPUSH">
            <summary>
            Datapush type
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainReachFeedbackEventArgs">
            <summary>
            Feedback event args
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachFeedbackEventArgs.#ctor">
            <summary>
            Create an empty CapptainReachFeedback event args
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainReachFeedbackEventArgs.#ctor(System.String)">
            <summary>
            Create a CapptainReachFeedback event args
            </summary>
            <param name="body"></param>
        </member>
        <member name="P:Capptain.Reach.CapptainReachFeedbackEventArgs.Body">
            <summary>
            Body of the feedback
            </summary>
        </member>
        <member name="T:Capptain.Reach.MessagesApiEventArgs">
            <summary>
            Event args implementation
            </summary>
        </member>
        <member name="M:Capptain.Reach.MessagesApiEventArgs.HasSucceeded">
            <summary>
            Indicate if the API has returned correctly (with a OK status code).
            </summary>
            <returns>True if OK, false otherwise</returns>
        </member>
        <member name="M:Capptain.Reach.MessagesApiEventArgs.HasMessages">
            <summary>
            Indicate if there is some messages.
            </summary>
            <returns>True if it's the case, false otherwise.</returns>
        </member>
        <member name="P:Capptain.Reach.MessagesApiEventArgs.StatusCode">
            <summary>
            The http status code of the request. Could be null.
            </summary>
        </member>
        <member name="T:Capptain.Reach.CapptainInvalidNotificationCreationException">
            <summary>
            CapptainInvalidNotificationCreationException
            </summary>
        </member>
        <member name="M:Capptain.Reach.CapptainInvalidNotificationCreationException.#ctor(System.Exception)">
            <summary>
            Create a CapptainInvalidNotificationCreationException.
            </summary>
            <param name="innerException">Inner exception</param>
        </member>
    </members>
</doc>
